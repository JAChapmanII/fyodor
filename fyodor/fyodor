#!/bin/zsh

. $XDG_CONFIG_HOME/zsh/functions.zsh
. ~/global

verbose=false
for arg in $@
do
	case "$arg" in
		-v|--verbose)
			verbose=true
			;;
		-q|--quiet)
			verbose=false
			;;
		-r|--reprocess)
			if [ "$(ls -A $processed)" != "" ]
			then
				mv $processed/* $parsebox
			fi
			;;
		-h|--help)
			print_message "Usage: $0 -[(v|-verbose)|(q|-quiet)] -(h|-help)"
			;;
		*)
			print_warn "$arg is not a valid argument, use -h for help."
			;;
	esac
done

function parse_message()
{
	file=$1
	address="$(cat $parsebox/$file | grep "From:" | head -n1 | tr ' ,' '\n' |
	sed -n 's/[<]*\([^@<>]*@[^\.<>]*\.[^<>]*\)[>]*/\1/p')"

	date="$(cat $parsebox/$file | grep "Date:" | head -n1 |
	sed -e 's/Date://g' -e 's/^[ \t]*//' -e 's/[ \t]*$//')"
	print_note "Address is: $address"
	print_note "Date    is: $date"

	message="$(cat new/$file | sed '1,/^$/ d')"
	if [ -z "$message" ]
	then
		print_error "This email is not formatted properly or has no message."
		print_error "The message could be: $(tail -n1 $parsebox/$file)"
		return
	fi
	command="$(echo $message | awk '{ print $1 }' | sed 's/://')"
	arguments="$(echo $message |
	sed -e "s/$command//" -e 's/^[ \t]*//' -e 's/[ \t]*$//')"

	print_note "Message is: $message"
	print_note "Command is: $command"
	print_note "Argsarray is: $arguments"
}

loaded="loaded_functions"
functions reset_loaded()
{
	[ -d "$loaded" ] || mkdir -p $loaded
	if [ "$(ls -A $loaded)" != "" ]
	then
		mv $loaded/* $functions_dir
	fi
}

reset_loaded

loaded_functions=()
function extract_loaded()
{
	if [ -z "$1" ]
	then
		exit 1
	fi
	for func in $(grep '&`' '$1' | grep -v '#`' | awk '{print $2}' | sed 's/()//')
	do
		loaded_functions+=$func
	done
}

function load_functions() # &`
{
	if [ "${loaded_functions[1]}" != "load_functions" ] || [ "$1" = "re" ]
	then
		extract_loaded $0
	fi
	if [ "$(ls -A $functions_dir)" != "" ]
	then
		for file in $(ls -A $functions_dir)
		do
			. $functions_dir/$file
			extract_loaded $functions_dir/$file
			mv $functions_dir/$file $loaded
			print_warn "Function: $file loaded"
		done
	fi
	print_warn "Now Loaded: ${loaded_functions}"
}

load_functions

function send_message()
{
	print_message "Sending: "
	echo $reply
	for recipient in $address
	do
		print_message "... to $recipient"
		echo "$reply" | msmtp "$recipient"
	done
}

function send_rephrase() # &`
{
	for recipient in $address
	do
		domain="$(echo $recipient | sed 's/[^@]*@//')"
		case $domain in
			vtext.com)
				reply="Please rephrase the query, Mr. Verizon."
				send_message
				;;
			*)
				;;
		esac
	done
}

tmp="fyodor${tmpextension}"
while true
do
	for email in $(ls $parsebox)
	do
		address=
		date=
		message=
		command=
		arguments=
		reply=
		attempted="no"

		print_message "Parsing message..."
		parse_message $email
		if [ ! -z "$command" ]
		then
			for $proper in $loaded_functions
			do
				if [ "$command" == "$proper" ]
				then
					attempted="yes"
					{ eval '$command "$arguments"' } 2> $tmp
					if [ ! -z "$reply" ]
					then
						send_message
					fi
				fi
			done
		fi

		if [ "$attempted" == "yes" ]
		then
			if [[ "$(wc -l $tmp | awk '{print $1}')" -gt "0" ]]
			then
				mv $parsebox/$email $errored
				print_error "Function had errors"
				print_error "--------- BEGIN ---------"
				cat $tmp
				print_error "---------- END ----------"
				send_rephrase
			else
				mv $parsebox/$email $processed
				print_message "Executed succesfully"
			fi
		else
			mv $parsebox/$email $nonexistant
			print_error "Function attempting to be executed does not exist"
			send_rephrase
		fi
		rm $tmp

		sleep 1
	done
done
