#!/bin/zsh

. $XDG_CONFIG_HOME/zsh/functions.zsh
. ~/global

# process args
# do these do anything?
verbose=false #{{{
for arg in $@
do
	case "$arg" in
		-v|--verbose)
			verbose=true
			;;
		-q|--quiet)
			verbose=false
			;;
		-r|--reprocess)
			if [ "$(ls -A $processed)" != "" ]
			then
				mv $processed/* $parsebox
			fi
			;;
		-h|--help)
			print_message "Usage: $0 -[(v|-verbose)|(q|-quiet)] -(h|-help)"
			;;
		*)
			print_warn "$arg is not a valid argument, use -h for help."
			;;
	esac
done #}}}

# parse_message
function parse_message() #{{{
{
	file=$1
	address="$(cat $parsebox/$file | grep "From:" | head -n1 | tr ' ,' '\n' |
	sed -n 's/[<]*\([^@<>]*@[^\.<>]*\.[^<>]*\)[>]*/\1/p')"

	date="$(cat $parsebox/$file | grep "Date:" | head -n1 |
	sed -e 's/Date://g' -e 's/^[ \t]*//' -e 's/[ \t]*$//')"
	print_note "Address is: $address"
	print_note "Date    is: $date"

	message="$(cat new/$file | sed '1,/^$/ d')"
	if [ -z "$message" ]
	then
		print_error "This email is not formatted properly or has no message."
		print_error "The message could be: $(tail -n1 $parsebox/$file)"
		return
	fi
	command="$(echo $message | awk '{ print $1 }' | sed 's/://')"
	if [ ! -z "$(echo $command | sed -n '/-[0-9]*/p' )" ]
	then
		amount="$command"
		command="$(echo $message | awk '{ print $2 }' | sed 's/://')"
		arguments="$(echo $message |
		sed -e "s/$amount//" -e "s/$command//" -e 's/^[ \t]*//' -e 's/[ \t]*$//')"
	else
		arguments="$(echo $message |
		sed -e "s/$command//" -e 's/^[ \t]*//' -e 's/[ \t]*$//')"
	fi

	message="$(echo $message | sed 's/[ ]*\([^ ]*\)[ ]*/\1/')"

	print_note "Message is: $message"
	print_note "Command is: $command"
	print_note "Argsarray is: $arguments"
} #}}}

loaded="loaded_functions"
# reset_loaded
functions reset_loaded() #{{{
{
	[ -d "$loaded" ] || mkdir -p $loaded
	if [ "$(ls -A $loaded)" != "" ]
	then
		mv $loaded/* $functions_dir
	fi
} #}}}

reset_loaded

loaded_functions=()
# extract_loaded
function extract_loaded() #{{{
{
	if [ -z "$1" ]
	then
		exit 1
	fi
	for func in $(grep '&`' "$1" | grep -v '#`' | awk '{print $2}' | sed 's/()//')
	do
		loaded_functions+=$func
	done
} #}}}

# load_functions [X]
function load_functions() # &` {{{
{
	if [ "${loaded_functions[1]}" != "load_functions" ] || [ "$1" = "re" ]
	then
		extract_loaded ~/fyodor
	fi
	if [ "$(ls -A $functions_dir)" != "" ]
	then
		for file in $(ls -A $functions_dir)
		do
			. $functions_dir/$file
			extract_loaded $functions_dir/$file
			mv $functions_dir/$file $loaded
			print_warn "Function: $file loaded"
		done
	fi

	comm="$(echo $1 | cut -f1 -d' ')"
rest="$(echo $1 | cut -f2-99 -d' ')"

	:> exec_message
	echo "#!/bin/zsh" >> exec_message
	echo "function exec_message()" >> exec_message
	echo "{" >> exec_message
	echo "	first=\"\$(echo \$1 | cut -f1 -d' ')\"" >> exec_message
	echo "	rest=\"\$(echo \$1 | cut -f2-99 -d' ')\"" >> exec_message
	echo "	case \$first in" >> exec_message
	for function in $loaded_functions
	do
		echo "		$function)" >> exec_message
		echo "			$function \$rest" >> exec_message
		echo "			;;" >> exec_message
	done
	echo "		*)" >> exec_message
	echo "			attempted=\"no\"" >> exec_message
	echo "			;;" >> exec_message
	echo "	esac" >> exec_message
	echo "}" >> exec_message
	cat exec_message
	. ./exec_message
	print_warn "Now Loaded: ${loaded_functions}"
} #}}}

load_functions

# SMS recipients message number
function SMS() #{{{
{
	if [ -z "$1" ] || [ -z "$2" ]
	then
		return 1
	fi
	recipients="$1"
	message="$2"

	if [ -z "$3" ]
	then
		amount="0"
	else
		amount="$3"
	fi

	print_message "Sending $amount message(s) to $recipients: "

	for i in {0..$amount}
	do
		start_cut="$(echo "1+157*$i" | bc)"
		end_cut="$(echo "157+157*$i" | bc)"
		section="$(echo "$message" | tr '\n' ' ' | cut -c ${start_cut}-${end_cut})"
		section="$(echo $section | sed 's/[ \t][ \t]*/ /g')"

		if [ ! -z "$section" ]
		then
			echo $section
			for recipient in $recipients
			do
				echo "$part $section" | mail "$recipient"
			done
		fi
		sleep 1
	done
} #}}}

# MMS recipients message number
function MMS() #{{{
{
	if [ -z "$1" ] || [ -z "$2" ]
	then
		return 1
	fi
	recipients="$1"
	message="$2"

	if [ -z "$3" ]
	then
		amount="0"
	else
		amount="$3"
	fi

	files="$(ls ${attachments})"

	print_message "Sending $amount message(s) to $recipients with files $files: "

	for i in {0..$amount}
	do
		start_cut="$(echo "1+997*$i" | bc)"
		end_cut="$(echo "997+997*$i" | bc)"
		section="$(echo "$message" | tr '\n' ' ' | cut -c ${start_cut}-${end_cut})"
		section="$(echo $section | sed 's/[ \t][ \t]*/ /g')"

		mail=""
		mail="MIME-Version:1.0
Content-Type: multipart/mixed;
  boundary=\"__CONTENT_64564_PART_BOUNDARY__33243242__\"

--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: text/plain;
 charset=utf-8;
 name=\"text_01_000.txt\"
Content-Location: text_01_000.txt

$section

"

		if [ ! -z "$files" ]
		then
			for file in $files
			do
				if [ "$(file $attachments/$file | grep 'JPEG image data')" != '' ]
				then
					mail+="--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: image/jpeg;
  name=\"$file\"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
	filename=\"$file\"

"
					mail+="$(base64 $attachments/$file)
"
				fi
				if [ "$(file $attachments/$file | grep 'PNG image data')" != '' ]
				then
					mail+="--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: image/png;
  name=\"$file\"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
	filename=\"$file\"

"
					mail+="$(base64 $attachments/$file)
"
				fi
			done
		fi

		mail+="
--__CONTENT_64564_PART_BOUNDARY__33243242__--
"

		if [ ! -z "$section" ]
		then
			echo $section
			for recipient in $recipients
			do
				echo "$mail" | msmtp "$recipient"
			done
		fi
		sleep 1
	done
} #}}}

# send_rephrase [X]
function send_rephrase() # &` {{{
{
	for recipient in $address
	do
		domain="$(echo $recipient | sed 's/[^@]*@//')"
		case $domain in
			vtext.com)
				SMS "$recipient" "Please rephrase the query, Mr. Verizon."
				;;
			*)
				;;
		esac
	done
} #}}}

# list_functions [X]
function list_functions() # &` {{{
{
	SMS "$address" "${loaded_functions}"
} #}}}

# help [X]
function help() # &` {{{
{
	SMS "$address" "Use 'list_functions' to get a list of functions. Hopefully, they'll be self explanatory, else text djef., else you're screwed right now :p"
} #}}}

tmp="fyodor${tmpextension}"
while true
do
	for email in $(ls $parsebox)
	do
		print_warn "Please do not C-c"
		address=
		date=
		message=
		command=
		arguments=
		reply=
		amount=
		attempted="yes"
		:> $tmp

		print_message "Parsing message..."
		parse_message $email
		if [ ! -z "$command" ]
		then
			exec_message "$message"
		fi

		if [ "$attempted" = "yes" ]
		then
			if [[ "$(wc -l $tmp | awk '{print $1}')" -gt "0" ]]
			then
				mv $parsebox/$email $errored
				print_error "Function had errors"
				print_error "--------- BEGIN ---------"
				cat $tmp
				print_error "---------- END ----------"
				send_rephrase
			else
				mv $parsebox/$email $processed
				if [ -z "$reply" ]
				then
					print_warn "Executed succesfully, but sent nothing"
				else
					print_message "Executed succesfully"
				fi
			fi
		else
			mv $parsebox/$email $nonexistant
			print_error "Function attempting to be executed does not exist"
			send_rephrase
		fi
		rm $tmp
	done
	print_note "Safe to C-c right now."
	sleep 1
done
