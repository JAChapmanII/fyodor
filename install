#!/bin/bash
# Make sure there is an existant config file
if [ ! -f "./config" ] #{{{
then
	echo "Please make sure you create a config based on config.example. See the README."
	exit 1
fi #}}}
. ./config

# Require this sript to be run as root
require_root

# Ensure git repo is clean
cd "${ROOT_DIR}" #{{{

if [ -z "${DIRTY}" ]
then
	commit="$(git status | grep "(working directory clean)")"
	if [ "x$commit" = "x" ]
	then
		print_error "Git repository is dirty, please fix"
		exit 1
	fi
fi #}}}

# Make sure the ${USERNAME} user exists
if [ -z "$(cat /etc/passwd | grep ${USERNAME})" ] #{{{
then
	print_error "${USERNAME} does not exist"
	print_note "See the README for an example command to create ${USERNAME}"
	exit 1
fi #}}}

# Check to make sure no KEEP_DIRS dirs exist
cd "${ROOT_DIR}/${PROJECT}" #{{{

for dir in ${KEEP_DIRS}
do
	if [ -d "$dir" ]
	then
		print_error "$dir exists in ${PROJECT}, but it is something kept over from old"
		print_error "Please see the config file to fix this"
		exit 1
	fi
done #}}}

dt="`date +'%y.%m.%d.%H.%M.%S.%N'`"
archive="home_${USERNAME}.bak.$dt.tar.gz"

print_note "The date is currently: $dt"

# Update NEEDS_EMAIL files with config info
print_note "Using config file to update: ${NEEDS_EMAIL}" #{{{
cd "${ROOT_DIR}/${PROJECT}"
for file in ${NEEDS_EMAIL}
do
	sed -i -e "s/EMAILNAME/${EMAIL_NAME}/g" -e "s/EMAILPASS/${EMAIL_PASS}/g" "$file"
done #}}}

# Make sure .msmtprc has the proper permissions
chmod 0600 "${ROOT_DIR}/${PROJECT}/.msmtprc"

# Duplicating COPY_FILES in $PROJECT dir
if [ ! -z "${COPY_FILES}" ] #{{{
then
	print_note "Copying over files: ${COPY_FILES}"
	cd "${ROOT_DIR}/${PROJECT}"
	for file in "${COPY_FILES}"
	do
		if [ -f "$file" ]
		then
			cp "$file" "./"
		fi
	done
fi #}}}

cd "${ROOT_DIR}"

# Backup current $PROJECT implementation if one exists and temporarily move KEEP_DIRS and clear
# out /home/$USERNAME if it exists so we can push
if [ -d "/home/${USERNAME}" ] #{{{
then
	print_message "Tar'ing up /home/${USERNAME} for safe keeping"
	tar -cf "${BACKUP_DIR}/$archive" /home/${USERNAME}
	if [ ! -f "${BACKUP_DIR}/$archive" ]
	then
		print_error "Backup failed, exiting"
		exit 1
	fi

	mkdir -p "tmp.${PROJECT}"
	for dir in ${KEEP_DIRS}
	do
		if [ -d "/home/${USERNAME}/$dir" ]
		then
			print_note "Moving $dir to a temporary safe location"
			mv "/home/${USERNAME}/$dir" "tmp.${PROJECT}"
		else
			print_note "$dir does not exist in old, creating"
			mkdir "tmp.${PROJECT}/$dir"
		fi
	done

	print_message "Removing everything that was in /home/${USERNAME}"
	rm -R "/home/${USERNAME}/"
	#}}}
else
	#{{{
	print_note "No current /home/${USERNAME} exists"

	mkdir -p "tmp.${PROJECT}"
	for dir in ${KEEP_DIRS}
	do
		print_note "Creating $dir in tmp.${PREJECT}"
		mkdir "tmp.${PROJECT}/$dir"
	done

	print_message "Nothing to delete from /home/${USERNAME}"
fi #}}}

# Push projcect to new home
print_message "Pushing ${PROJECT} to /home" #{{{
sudo cp -R "${PROJECT}" "/home"
sudo mv "/home/${PROJECT}" "/home/${USERNAME}"
for dir in ${KEEP_DIRS}
do
	print_note "Moving $dir back into place"
	mv "tmp.${PROJECT}/$dir" "/home/${USERNAME}"
done
rmdir "tmp.${PROJECT}" #}}}

# Fix file permissins
print_message "Changing the ownership on /home/${USERNAME} so ${USERNAME} can read/write them" #{{{
chown -R "${USERNAME}:users" "/home/${USERNAME}" #}}}

print_note "New version installed!"

# Reverting "sed" changes to NEEDS_EMAIL files [pun intended]
print_note "Using config file to revert changes to: ${NEEDS_EMAIL}" #{{{
cd "${ROOT_DIR}/${PROJECT}"
for file in ${NEEDS_EMAIL}
do
	sed -i -e "s/${EMAIL_NAME}/EMAILNAME/g" -e "s/${EMAIL_PASS}/EMAILPASS/g" "$file"
done #}}}

# Deleting COPY_FILES files
if [ ! -z "${COPY_FILES}" ] #{{{
then
	print_note "Deleting files: ${COPY_FILES}"
	cd "${ROOT_DIR}/${PROJECT}"
	for file in "${COPY_FILES}"
	do
		bfile="$(basename $file)"
		if [ -f "$bfile" ]
		then
			rm "$bfile"
		fi
	done
fi #}}}

print_note "All done."

