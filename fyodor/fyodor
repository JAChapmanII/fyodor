#!/bin/zsh
#&` [Ll][Ii][Ss][Tt]*->list_functions
#&` [Hh][Ee][Ll][Pp]*->help
#&` [Ll][Oo][Aa][Dd]*->load
#&` [Mm][Aa][Pp]*->map

. ${XDG_CONFIG_HOME}/zsh/functions.zsh
. ~/global

VERBOSE="false"
FUNCTION_FROM=()
FUNCTION_TO=()
VALID=""
ADDRESS=""
COMMAND=""
ARGUMENTS=""
RETURN_TYPE=""
AMOUNT=""

loaded_dir="loaded_functions"
function_dir="functions"
[ -d "$loaded_dir" ] || mkdir -p $loaded_dir
[ -d "$functions_dir" ] || mkdir -p $functions_dir

# process args
for arg in $@ #{{{
do
	case "$arg" in
		-v|--verbose)
			VERBOSE="true"
			;;
		-q|--quiet)
			VERBOSE="false"
			;;
		-r|--reprocess)
			if [ "$(ls -A $processed)" != "" ]
			then
				mv $processed/* $parsebox
			fi
			;;
		-h|--help)
			print_message "Usage: $0 -[(v|-verbose)|(q|-quiet)] -(h|-help)"
			;;
		*)
			print_warn "$arg is not a valid argument, use -h for help."
			;;
	esac
done #}}}

# parse_message [COMMAND,ARGUMENTS,ADDRESS] {RETURN_TYPE,AMOUNT}
function parse_message() #{{{
{
	AMOUNT="1"
	message="$(cat $parsebox/$1)"
	ADDRESS="$(echo $message | grep 'From: ' | tr ' ,<>' '\n' | grep '@' | head -n1)"
	print_note "Address is: ${ADDRESS}"

	BOUNDARY=""
	BLINE="$(echo $message | grep -A1 "Content-Type:" | grep 'boundary="')"
	if [ ! -z "$BLINE" ]
	then
		eval "$(echo $BLINE | sed 's/boundary/BOUNDARY/')"
		message="$(echo $message | sed '1,/^$/d')"
	fi
	message="$(echo $message | sed '1,/^$/ d')"
	if [ ! -z "$BLINE" ]
	then
		message="$(echo $message | sed "/${BOUNDARY}/,$ d/")"
	fi
	message="$(echo $message |
	sed -e 's/^[ \t]*\(.*\)[ \t]*$/\1/' -e 's/$/ &/' -e 's/[ \t]\+/ /g')"

	if [ -z "$message" ]
	then
		print_error "This email is not formatted properly or has no message."
		return
	fi
	print_note "Message is: "
	echo $message

	message="$(echo $message | head -n1)"
	first="$(echo $message | cut -c1)"
	while [ "$first" = "-" ]
	do
		arg="$(echo $message | cut -f1 -d' ')"
		case "$arg" in
			-*[Ss]*)
				RETURN_TYPE="SMS"
				print_note "Set return type to SMS"
				;;
			-*[Mm]*)
				RETURN_TYPE="MMS"
				print_note "Set return type to MMS"
				;;
			-*[Ee]*)
				RETURN_TYPE="EMAIL"
			*)
				AMOUNT="$(echo $arg | sed 's/-*//g')"
				print_note "Set amount to $AMOUNT"
				;;
		esac
		message="$(echo $message | cut -f2-999 -d' ')"
		first="$(echo $message | cut -c1)"
	done

	COMMAND="$(echo $message | cut -f1 -d' ')"
	ARGUMENTS="$(echo $message | cut -f2-999 -d' ' | sed 's/[ \t]\+\(.*\)[ \t]\+$/\1/')"

	print_note "Command is: $COMMAND"
	print_note "Arguments are: $ARGUMENTS"
} #}}}

# SMS recipients message number
function SMS() #{{{
{
	if [ -z "$1" ]
	then
		return 1
	fi

	if [ "$AMOUNT" = "0" ]
	then
		AMOUNT="25"
	fi
	print_message "Sending $AMOUNT message(s) to $ADDRESS: "

	total="$(echo "$AMOUNT -1" | bc)"
	message="$(echo $1 | sed 's/[ \t]\+/ /' | tr -cd '\11\12\15\40-\176')"
	for i in {0..$total}
	do
		if [ "$message" = "" ]
		then
			print_note "Nothing left to send."
			return
		fi
		section="$(echo $message | sed -n '
		:add
		$! {
			N
			b add
		}
		$ {
			s/\(.\{1,156\}\).*/\1/p
		}')"
		message="$(echo $message | sed -n '
		:add
		$! {
			N
			b add
		}
		$ {
			s/.\{1,156\}\(.*\)/\1/p
		}')"
		if [ ! -z "$section" ]
		then
			print_note "Part $part:"
			echo "$section"
			echo "$i $section" | mail "$ADDRESS"
		fi
		sleep 1
	done
} #}}}

# MMS recipients message number
function MMS() #{{{
{
	if [ -z "$1" ]
	then
		return 1
	fi
	files="$(ls ${attachments})"

	# Try to determine where we're sending this sucker {{{
	number="$(echo $ADDRESS | sed 's/\(.*\)@.*/\1/')"
	domain="$(echo $ADDRESS | sed 's/.*@\(.*\)/\1/')"
	case $domain in
		[Vv][Tt][Ee][Xx][Tt].[Cc][Oo][Mm])
			domain="vzwpix.com"
			;;
		*)
			domain=""
			;;
	esac #}}}
	if [ -z "$domain" ]
	then
		print_error "Couldn't determine what the domain maps to."
		return 1
	fi

	if [ "$AMOUNT" = "0" ]
	then
		AMOUNT="25"
	fi
	print_message "Sending $AMOUNT message(s) to $ADDRESS with $files: "

	total="$(echo "$AMOUNT -1" | bc)"
	message="$(echo $1 | sed 's/[ \t]\+/ /' | tr -cd '\11\12\15\40-\176')"
	for i in {0..$total}
	do
		section="$(echo $message | sed -n '
		:add
		$! {
			N
			b add
		}
		$ {
			s/\(.\{1,996\}\).*/\1/p
		}')"
		message="$(echo $message | sed -n '
		:add
		$! {
			N
			b add
		}
		$ {
			s/.\{1,996\}\(.*\)/\1/p
		}')"

		# Header with $section {{{
		mail=""
		mail="MIME-Version:1.0
Content-Type: multipart/mixed;
  boundary=\"__CONTENT_64564_PART_BOUNDARY__33243242__\"

--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: text/plain;
 charset=utf-8;
 name=\"text_01_000.txt\"
Content-Location: text_01_000.txt

$i $section

" #}}}

		# Attach files if there are any. Attaches all files it can to all
		# with absolutely no checks what-so-ever. Fix at some point {{{
		if [ ! -z "$files" ]
		then
			for file in $files
			do
				if [ "$(file $attachments/$file | grep 'JPEG image data')" != '' ]
				then
					# Middle with $file if JPEG {{{
					mail+="--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: image/jpeg;
  name=\"$file\"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
	filename=\"$file\"

"
					mail+="$(base64 $attachments/$file)
" #}}}
				fi
				if [ "$(file $attachments/$file | grep 'PNG image data')" != '' ]
				then
					# Middle with $file if PNG {{{
					mail+="--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: image/png;
  name=\"$file\"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
	filename=\"$file\"

"
					mail+="$(base64 $attachments/$file)
" #}}}
				fi
			done
		fi #}}}

		# Footer that ends everything {{{
		mail+="
--__CONTENT_64564_PART_BOUNDARY__33243242__--
" #}}}

		# If there are files or some message, send the damn thing
		if [ ! -z "$section" ] || [ ! -z "$files" ]
		then
			print_note "Part $part:"
			echo "$section"
			echo "$mail" | msmtp "${number}@${domain}"
		fi
		sleep 1
	done

	for file in $files
	do
		rm ${attachments}/$file
	done
} #}}}

# Email recipients message number (Sends it all in one chunk)
# EMAIL recipients message number
function EMAIL() #{{{
{
	if [ -z "$1" ]
	then
		return 1
	fi
	files="$(ls ${attachments})"

	print_message "Sending an EMAIL message to $ADDRESS with $files: "

	message="$(echo $1 | sed 's/[ \t]\+/ /' | tr -cd '\11\12\15\40-\176')"

	# Header with $section {{{
	mail=""
	mail="MIME-Version:1.0
Content-Type: multipart/mixed;
  boundary=\"__CONTENT_64564_PART_BOUNDARY__33243242__\"

--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: text/plain;
 charset=utf-8;
 name=\"text_01_000.txt\"
Content-Location: text_01_000.txt

$message

" #}}}

	# Attach files if there are any. Attaches all files it can to all
	# with absolutely no checks what-so-ever. Fix at some point {{{
	if [ ! -z "$files" ]
	then
		for file in $files
		do
			if [ "$(file $attachments/$file | grep 'JPEG image data')" != '' ]
			then
				# Middle with $file if JPEG {{{
				mail+="--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: image/jpeg;
  name=\"$file\"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
	filename=\"$file\"

"
				mail+="$(base64 $attachments/$file)
" #}}}
			fi
			if [ "$(file $attachments/$file | grep 'PNG image data')" != '' ]
			then
				# Middle with $file if PNG {{{
				mail+="--__CONTENT_64564_PART_BOUNDARY__33243242__
Content-Type: image/png;
  name=\"$file\"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
	filename=\"$file\"

"
				mail+="$(base64 $attachments/$file)
" #}}}
			fi
		done
	fi #}}}

	# Footer that ends everything {{{
	mail+="
--__CONTENT_64564_PART_BOUNDARY__33243242__--
" #}}}

	# If there are files or some message, send the damn thing
	if [ ! -z "$message" ] || [ ! -z "$files" ]
	then
		echo $message
		echo "$mail" | msmtp "$ADDRESS"
	fi

	for file in $files
	do
		rm ${attachments}/$file
	done
} #}}}

# reply
function reply() #{{{
{
	if [ -z "$1" ]
	then
		return
	fi
	if [ "$RETURN_TYPE" = "MMS" ]
	then
		MMS "$1"
	else
		if [ "$RETURN_TYPE" = "EMAIL" ]
		then
			EMAIL "$1"
		else
			SMS "$1"
		fi
	fi
} #}}}

# list_functions
function list_functions() # {{{
{
	reply "${FUNCTION_FROM[*]}"
} #}}}

# help
function help() #{{{
{
	if [ ! -z "$1" ] && [ "$1" = "me" ]
	then
		reply "I'm sorry, it seems that we can't help you at this time. Please seek psychiatric help immediately."
	else
		reply "Use 'list' to get a list of functions. Hopefully, they'll be self explanatory, else text djef., else you're screwed right now :p"
	fi
} #}}}

# map
function map() #{{{
{
	if [ -z "$1" ]
	then
		return
	fi
	for i in {1..${#FUNCTION_FROM[*]}}
	do
		if [ "$1" = "${FUNCTION_FROM[$i]}" ]
		then
			reply "Function ${FUNCTION_FROM[$i]} maps to ${FUNCTION_TO[$i]}"
			return
		fi
	done
	reply "Function $1 does not map to anything."
} #}}}

# load [FUNCTION_FROM,FUNCTION_TO] [[exec_message]]
function load() #{{{
{
	FUNCTION_FROM=()
	FUNCTION_TO=()
	if [ "$(ls -A $loaded_dir)" != "" ]
	then
		mv $loaded_dir/* $functions_dir
	fi

	for mapping in $(sed -n '/^#&`/s/^#&` //p' $home/fyodor)
	do
		FUNCTION_FROM+="$(echo $mapping | sed 's/->.*$//')"
		FUNCTION_TO+="$(echo $mapping | sed 's/^.*->//')"
	done
	print_warn "Function file \"~/fyodor\" loaded"

	if [ "$(ls $functions_dir)" != "" ]
	then
		for file in $(ls $functions_dir)
		do
			. $functions_dir/$file
			for mapping in $(sed -n '/^#&`/s/^#&` //p' $functions_dir/$file)
			do
				FUNCTION_FROM+="$(echo $mapping | sed 's/->.*$//')"
				FUNCTION_TO+="$(echo $mapping | sed 's/^.*->//')"
			done
			mv $functions_dir/$file $loaded_dir
			print_warn "Function file \"$file\" loaded"
		done
	fi

	:> exec_message
	echo "#!/bin/zsh" >> exec_message
	echo "function exec_message()" >> exec_message
	echo "{" >> exec_message
	echo "	VALID=\"true\"" >> exec_message
	echo "	case \$COMMAND in" >> exec_message
	for i in {1..${#FUNCTION_FROM[*]}}
	do
		echo "		${FUNCTION_FROM[$i]})" >> exec_message
		echo "			${FUNCTION_TO[$i]} \$ARGUMENTS" >> exec_message
		echo "			;;" >> exec_message
	done
	echo "		*)" >> exec_message
	echo "			VALID=\"false\"" >> exec_message
	echo "			;;" >> exec_message
	echo "	esac" >> exec_message
	echo "}" >> exec_message
	. ./exec_message
	print_warn "Now Loaded: ${FUNCTION_FROM[*]}"
} #}}}

load

tmp="fyodor${tmpextension}"
# main loop
while true #{{{
do
	for email in $(ls $parsebox)
	do
		print_warn "Please do not C-c"
		VALID="false"
		ADDRESS=""
		COMMAND=""
		ARGUMENTS=""
		RETURN_TYPE=""
		AMOUNT=""
		:> $tmp

		print_message "Parsing message..."
		parse_message $email
		if [ ! -z "$COMMAND" ]
		then
			exec_message "$COMMAND $ARGUMENTS"
		fi

		if [ "$VALID" = "true" ]
		then
			if [[ "$(wc -l $tmp | awk '{print $1}')" -gt "0" ]]
			then
				mv $parsebox/$email $errored
				print_error "Function had errors"
				print_error "--------- BEGIN ---------"
				cat $tmp
				print_error "---------- END ----------"
				AMOUNT="1"
				SMS "Function execution failed"
			else
				mv $parsebox/$email $processed
				print_message "Executed succesfully"
			fi
		else
			mv $parsebox/$email $nonexistant
			print_error "Function attempting to be executed does not exist"
			AMOUNT="1"
			SMS "Function does not exist"
		fi
		rm $tmp
		print_note "Safe to C-c right now."
		sleep 1
	done
	sleep 1
done #}}}

